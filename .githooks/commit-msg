#!/usr/bin/env bash

##
# Check README.md, and don't forget to run:
#
#   $ git config --local core.hooksPath .githooks
##

##
# Valid commit types for this repository.
#
# Update manually when a new type needs to be added.
#
commit_types=(
	##
	# Type for cleaning up stuff, updating dependencies, etc.
	#
	chore

	##
	# Configs to the repository.
	#
	config

	##
	# For updating docs like README or LICENSE, etc.
	#
	docs

	##
	# For bash, shell and command line stuff.
	#
	bash
	cmdline
	shell

	##
	# Commits for stuff related to the awesome Emacs editor.
	#
	emacs

	##
	# Commits for stuff related to the awesome Vim editor.
	#
	vim

	##
	# Any thing related to command line, bash, sh,
	# zsh, and a combination of them.
	#
	cmdline

	##
	# Commits for stuff related to the awesome Emacs editor.
	#
	emacs

	##
	# Notes from the book TypeScript in 50 Lessons
	# by Stefan Baumgartner.
	#
	ts50

	##
	# For general TypeScript stuff.
	#
	ts

	##
	# For general PureScript stuff.
	#
	# For Functional Programming Made Easier book, use the prefix
	# ‘purs’ with the type 'FPME', e.g.:
	#
	#   $ git commit -m 'purs(FPME): Add hello world example'
	#
	purs

	##
	# Notes for the course JavaScript Algorithms and Data Structures
	# Masterclass by Colt Stele on Udemy with my own notes, solutions,
	# ideas and further content. Except I write in TypeScript.
	#
	algdsts
)

##
# The commit-msg hook passes the commit message file as the first
# parameter to the script.
#
commit_editmsg_file="$1"

##
# We want to validate the commit subject (title, headline),
# not the body.
#
subject="$(sed --silent 1p < "$commit_editmsg_file")"

##
# Exit with SUCCESS status as soon as we find a first matching type.
#
for t in "${commit_types[@]}"
do
	##
	# This grep regex matches a commit type with or without a scope:
	#
	# • bash: msg here
	# • bash(heredocs): msg here
	# • bash(heredocs, redirects): msg here
	#
	if printf %s "$subject" | grep --silent "^${t}\(([^)]\+)\)\?: "
	then
		exit 0
	fi
done

#
# If we reach this point in the script, it means no types matched inside
# the loop. We inform the user and exit with status 1 to indicate
# failure so the commit is not performed.
#

cat <<\EOF
Your commit message does not contain a valid commit type.

Valid types:

EOF

printf '  • %s\n' "${commit_types[@]}"

exit 1

#
# vim: set tw=72 noexpandtab shiftwidth=2 tabstop=2:
#
