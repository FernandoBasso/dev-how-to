* IFS Field Separator Default Value
  :PROPERTIES:
  :CUSTOM_ID: ifs-field-separator-default-value
  :END:
First, let's debug the default value of =IFS=:

#+begin_example
  $ echo -n "$IFS" | hexdump -C
  00000000  20 09 0a
  00000003

  $ printf '%s\n' "$IFS" | od -c -a -x
  0000000      \t  \n  \n
           sp  ht  nl  nl
             0920    0a0a
#+end_example

So, the default value of =IFS= is a space, a horizontal tab, and a
newline (which are natural word separators). Remember the excerpt from
[[https://www.gnu.org/software/bash/manual/bash.html#Arrays][bash's man
page]].

* Using IFS to Convert Array To String
  :PROPERTIES:
  :CUSTOM_ID: using-ifs-to-convert-array-to-string
  :END:
IFS can be used to our advantage to convert arrays to strings in a very
simple and clean manner. But first, remember this:

#+begin_quote
  If the word is double-quoted, ${name[*]} expands to a single word with
  the value of each array member separated by the first character of the
  IFS variable.

  --- bash manual
#+end_quote

Note it reads *first character of the IFS variable*! So, yeah, the =IFS=
variable can contain more than one character which could potentially be
used as a word separator.

Let's play with IFS. First, create an array:

#+begin_example
  $ nums=(1 2 3 4)
#+end_example

The first char of =IFS= is the space, so, as we quote =nums= and use the
=[*]= subscript, the output is a string with the elements of =nums=
separated by a space.

#+begin_example
  $ printf '“%s”\n' "${nums[*]}"
  “1 2 3 4”
#+end_example

We can change the value of =IFS=, and then using the =[*]= syntax helps
to better understand the whole mater:

#+begin_example
  $ IFS='#'; printf '“%s”\n' "${nums[*]}"
  “1#2#3#4”

  $ IFS='_'; printf '“%s”\n' "${nums[*]}"
  “1_2_3_4”

  $ IFS=$'\t'; printf '“%s”\n' "${nums[*]}"
  “1      2       3       4”

  $ IFS=$'\n'; printf '“%s”\n' "${nums[*]}"
  “1
  2
  3
  4”
#+end_example

Looks like setting =IFS= for a single command does not work:

#+begin_example
  $ nums=(1 2 3 4)

  $ IFS=- echo "${nums[*]}"
  2 2 3 4

  $ IFS=- printf '%s\n' "${nums[*]}"
  1 2 3 4
#+end_example

In neither of the cases is =-= used with the syntax =[*]=. Both =echo=
and =printf= are shell built-ins:

#+begin_example
  $ type echo printf
  echo is a shell builtin
  printf is a shell builtin
#+end_example

But it works for =read= (which is also a built-in):

#+begin_example
  $ IFS=- read -r -a arr <<<'x-y-z'

  $ echo "${#arr[@]}"
  3

  $ printf '%s\n' "${arr[@]}"
  x
  y
  z
#+end_example

Yeah, =read= honored =-= as the field separator, and =arr= was assigned
three elements, =a=, =b= and =c=.

@TODO: Why does it work for =read= but not for =echo= and =printf=?
Could it simply be that some commands simply do not honor IFS? In any
case, =help read= explicitly tells us that IFS is used with =read=.

@TODO: Check whether the man pages for echo and printf, as well as their
posix specs say something about IFS.

** IFS Links and Resources
   :PROPERTIES:
   :CUSTOM_ID: ifs-links-and-resources
   :END:

- [[https://unix.stackexchange.com/questions/120575/understanding-the-default-value-of-ifs]]

- [[https://unix.stackexchange.com/questions/26784/understanding-ifs]]

- [[https://unix.stackexchange.com/questions/92187/setting-ifs-for-a-single-statement]]
