* Echo and Printf
  :PROPERTIES:
  :CUSTOM_ID: echo-and-printf
  :END:
[TOC]

** How to print =-n=?
   :PROPERTIES:
   :CUSTOM_ID: how-to-print--n
   :END:
This doesn't work:

#+begin_example
  $ echo -- -n
  -- -n.
#+end_example

Not what we want...​ Bash's =echo= honors
[[https://pubs.opengroup.org/onlinepubs/9699919799/utilities/echo.html][the
specs]].

#+begin_quote
  The echo utility shall not recognize the "--" argument in the manner
  specified by Guideline 10 of XBD Utility Syntax Guidelines; "--" shall
  be recognized as a string operand.

  --- echo POSIX spec
#+end_quote

We can =man ascii= and look for the numeric value of =-=:

*Excerpt from `man ascii'.*

#+begin_example
  Oct   Dec   Hex   Char
  ──────────────────────
  ...
  055   45    2D    -
  ...
#+end_example

Then we can use the =-e= option for =echo= and use the octal or
hexadecimal values to produce =-= and just implicitly concatenate both
=-= and =n=.

#+begin_example
  $ echo -e '\055'n
  -n

  $ echo -e '\x2d'n
  -n
#+end_example

"Any fool can make something complicated. It takes a genius to make it
simple."

Therefore:

#+begin_example
  $ echo -n -; echo n;
#+end_example

Still, jokes apart, the version with =-e= and =\x2d= is cool too.

Nice question and discussion:
[[https://unix.stackexchange.com/questions/147143/when-and-how-was-the-double-dash-introduced-as-an-end-of-options-delimiter][When
and how was the double-dash (--) introduced as an end of options
delimiter in Unix/Linux?]]
