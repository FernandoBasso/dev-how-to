#+TITLE: Ruby Math

* round
Ruby `Float` type has a `round` method that can either round to the nearest integer or round to a specific number of decimal places, in which case, `round` takes an argument.

#+BEGIN_SRC :ruby
5.34.round
# --> 5

5.5.round
# --> 6

7.1234.round(3)
# --> 7.123

7.1234(1)
# --> 7.1
#+END_SRC

* Some Math Tricks

Lest common multiple:

#+BEGIN_SRC :ruby
4.lcm(3)
# --> 12

12.lcm(9)
# --> 36
#+END_SRC

Sum of the absolute values of two numbers:

#+BEGIN_SRC :ruby
-5.abs.+(-3.abs)
# --> 8
#+END_SRC

Return the negative of a number:

#+BEGIN_SRC :ruby
def negative(num)
  return num if num.negative?
  return num * -1
end

negative(0)
# --> 0

negative(-1)
# --> -1

negative(1)
# --> -3
#+END_SRC

Get the last digit of a number:

#+BEGIN_SRC :ruby
def last_digit(num)
  num % 10
end
  
last_digit(0)
# --> 0

last_digit(1)
# --> 1

last_digit(1234)
# --> 4

last_digit(1234567)
# --> 7
#+END_SRC

A method that takes `num` and `n` and returns the last `n` digits from `num`:

#+BEGIN_SRC :ruby
# ASSUME: neither arg is zero.
def last_n_digits(num, n)
  num % (10 ** n)
end

last_n_digits(235, 1)
# --> 5

last_n_digits(235, 2)
# --> 35
#+END_SRC

The decimal remainder is the right side of the decimal point of a number.

#+BEGIN_SRC :ruby
def dec_remainder_of_two_floats(f_dividend, f_divisor)
  # Divide normally.
  quotient = f_dividend / f_divisor
  
  # Extract the decimal remainder.
  (quotient - quotient.to_i).round(1)
end

dec_rem_two_floats(5.3, 2.1)
# --> 0.5, because 5.3 / 2.1 is 2.5.
#+END_SRC


| id | name           | email             |
|  1 | Yoda           | yoda@theforce.io  |
|  2 | Luke Skywalker | luke@padawans.net |
