* Strings
  :PROPERTIES:
  :CUSTOM_ID: strings
  :END:
** Importance of Quoting
   :PROPERTIES:
   :CUSTOM_ID: importance-of-quoting
   :END:

#+begin_quote
  *Caution*

  The "space" character is very important in Bash (and other shells). It
  delimits /words/, a.k.a /words/.
#+end_quote

[[https://www.gnu.org/savannah-checkouts/gnu/bash/manual/bash.html#Quoting][Bash
man page section on Quoting]]

** Basic Examples
   :PROPERTIES:
   :CUSTOM_ID: basic-examples
   :END:
Here, =echo= is being given three arguments to print:

#+begin_example
  $ echo may the force
#+end_example

And here, =printf= is being given one /format specifier/ (=%s=) and
/three arguments/. The format specifier is reused until all arguments
all consumed.

#+begin_example
  $ printf '%s\n' be with you.
#+end_example

The above is the same as:

#+begin_example
  $ printf '%s\n' be
  $ printf '%s\n' with
  $ printf '%s\n' you.
#+end_example

From =help printf=:

#+begin_quote
  The format is re-used as necessary to consume all of the arguments. If
  there are fewer arguments than the format requires, extra format
  specifications behave as if a zero value or null string, as
  appropriate, had been supplied.

  -- help printf
#+end_quote

** Escape Character
   :PROPERTIES:
   :CUSTOM_ID: escape-character
   :END:
*** Example 1 - Printing
    :PROPERTIES:
    :CUSTOM_ID: example-1---printing
    :END:
*Example.*

#+begin_example
  $ echo foo\
      bar
  foo bar
#+end_example

The unquoted escape removes the newline. We are left with =foo␠␠␠␠bar=.
That is two arguments. =echo= prints those arguments separated by a
single whitespace.

From =help echo=:

#+begin_quote
  Display the ARGs, separated by a single space character and followed
  by a newline, on the standard output.

  -- help echo
#+end_quote

*** Example 2 - Assignment
    :PROPERTIES:
    :CUSTOM_ID: example-2---assignment
    :END:
However, the same syntax doesn't work for an assignment expression:

*Example.*

#+begin_example
  $ str=foo\
      bar
#+end_example

*Output.*

#+begin_example
  $ bash dev.sh
  dev.sh: line 2: bar: command not found
#+end_example

And the reason why
[[https://lists.gnu.org/archive/html/help-bash/2019-09/msg00012.html][was
explained]] by no one less than the most honorable Greg Wooledge The
First.

In short, it becomes this:

*Example on how it is interpreted.*

#+begin_example
  str=foo bar
#+end_example

That is, we create an environment variable =str=foo= for the command
=bar=. Can be checked with this:

#+begin_example
  $ str=foo\
  >  printenv str
  foo
#+end_example

We indeed create an environment variable =str= with the value "foo" for
the current command.

** Single vs Double Quotes
   :PROPERTIES:
   :CUSTOM_ID: single-vs-double-quotes
   :END:
*** Quoting - Example 1
    :PROPERTIES:
    :CUSTOM_ID: quoting---example-1
    :END:
Note we quote neither the string being assigned to =str= nor the
variable passed to =printf=.

#+begin_example
  $ str=The force is strong with this one.
  -bash: force: command not found
#+end_example

The problem is that the shell assigns "The" to =str=, sees the space,
which separates token "The" from the token "force" and then tries to run
the command =force= using the environment variable =str=, and thus the
error.

In short, we are setting the environment variable =str=The= for the
command =force=, and the remaining words would become the arguments to
the command. Since =force= is not a real command or program (on my
system, at least), the error occurs.

With the above, we can then understand why these two next examples
produce they output observed.

#+begin_example
  $ str=The echo is strong with this one.
  is strong with this one.

  $ str=The printf '%s\n' is strong with this one.
  is
  strong
  with
  this
  one.
#+end_example

In both cases, we create an environment variable (which is not even
used) =str=The=. Then there is the =echo= and =printf= commands. =echo=
prints any arguments passed, and =printf='s format specifier is used as
many times as needed to consume all arguments.

*** Quoting - Example 2
    :PROPERTIES:
    :CUSTOM_ID: quoting---example-2
    :END:
We can "quote" values either by using single quotes, double quotes, or
escaping the spaces and other especial characters. Each of the three
strings below is assigned as a single value to the heir corresponding
variable:

#+begin_example
  $ s1=foo\ bar
  $ s2='foo bar'
  $ s3="foo bar"
#+end_example

In all three cases, the space character is made literal and does not
cause the shell to interpret it as a token separator.

So, we try the next example proper:

#+begin_example
  $ str='The force is strong with this one.'
  $ printf '%s\n' $str 
  The
  force
  is
  strong
  with
  this
  one.
#+end_example

- Note we did not quote =$str=. Therefore, the shell does
  /word-splitting/ and =printf= receives several arguments, which it
  prints according to the format specifier =%s\n= thus, each word on its
  own line. We made spaces literal when assigning to =str=, but did not
  prevent word-splitting when using the variable. Double-quoting the
  variable is the correct approach most of the time:

#+begin_html
  <!-- end list -->
#+end_html

#+begin_example
  $ printf '%s\n' "$str"
  The force is strong with this one.
#+end_example

** Links and Resources
   :PROPERTIES:
   :CUSTOM_ID: links-and-resources
   :END:

- [[http://oliviercontant.com/why-is-printf-better-than-echo-in-shell-scripting/]]
