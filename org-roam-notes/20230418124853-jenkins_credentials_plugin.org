:PROPERTIES:
:ID:       C27F9914-11F5-4A54-9A36-75382249288A
:END:
#+TITLE: Jenkins-Credentials-Plugin
#+STARTUP: contents

* _USR and _PSW variables

Doing something like this:

#+begin_example
enviroment {
  GIT = credentials('git-ssh-gitlab')
}
#+end_example

Actually creates two variables:

- ~GIT_USR~ for user.
- ~GIT_PSW~ for password.

Which means we can further extend to this:

#+begin_example
enviroment {
  GIT = credentials('git-ssh-gitlab')
  GITLAB_USERNAME = "${env.GIT_USR}"
  GITLAB_PASSWORD = "${env.GIT_PSW}"
}
#+end_example

Which allows to then do something like this:

#+begin_example
stage('Deploy API Docs') {
  steps {
    sh('''
      git config user.name "${GITHUB_AUTHOR_NAME}"
      git config user.email "${GITHUB_AUTHOR_EMAIL}"
      git config credential.username "${GITHUB_USERNAME}"
      git config credential.helper "!f() { echo password=\$GITHUB_PASSWORD; }; f"

      export GIT_SSH_COMMAND="ssh -oStrictHostKeyChecking=no"

      ##
      # Avoid executing git pre-push or any other hooks. We neither need
      # nor want git hooks for generating and publishing the docs.
      #
      git config core.hooksPath /dev/null

      python -m pip install --upgrade pip
      python -m pip --version
      python -m pip install --requirement ./requirements.txt
      python -m mkdocs --version

      npx redoc-cli bundle ./docs/openapi/xapi-spec.yml \
        --output docs/openapi/xapi-spec.html

      python -m mkdocs --verbose gh-deploy --force
    ''')
  }
}
#+end_example

